import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.entity.mime.content.FileBody;

import java.io.File;
import java.io.InputStream;

import java.nio.charset.StandardCharsets;

import java.lang.StringBuilder;

import org.json.*;
/*import groovy.lang.Grab;
@GrabConfig(systemClassLoader=true)
@Grab('com.googlecode.json-simple:json-simple:1.1')*/
/*def classLoader = ClassLoader.systemClassLoader
while (classLoader.parent) {
	classLoader = classLoader.parent
}
//classLoader.addURL(new File("/opt/oracle/product/11.2.0/client/jdbc/lib/ojdbc6.jar").toURL())
classLoader.addURL(new File("C:/Users/viraj.chhaiya/.m2/repository/com/googlecode/json-simple/json-simple/1.1/json-simple-1.1.jar").toURL())*/

/*import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;*/

node('master'){
	def workSpaceHome = pwd()
    stage('Clean') {
        deleteDir()
    }
    stage('Checkout') {
        checkout scm
    }
	/*stage('Build'){
		if (isUnix()) {
			sh "'${mvnHome}/bin/mvn' clean test"
		} else {
			bat(/"${mvnHome}\bin\mvn" clean test/)
		}
	}*/
	stage('UploadResults'){
		load(workSpaceHome + "/config.groovy")
		echo "Uploading testresult file........"
		def baseurl="${baseUrl}"
		def apikey="${apikey}"
		def scope="${scope}"
		def absolutefilepath="${workSpaceHome}"+"/"+"${filepath}"
		def buildid="${buildId}"
		def platformid="${platformId}"
		def dropid="${dropId}"
		def entitytype="${entityType}"
		def fileid
		
		echo "baseurl:"+baseurl
		echo "apikey:"+apikey
		echo "scope:"+scope
		echo "absolutepath:"+absolutefilepath
		echo "buildID:"+buildid
		echo "platformID:"+platformid
		echo "dropID:"+dropid
		echo "entityType:"+entitytype
		
		
		//Uploading file
		CloseableHttpClient httpClient = HttpClients.createDefault();
		HttpPost uploadFile=new HttpPost(baseurl+"/rest/import/create/1");
		uploadFile.addHeader("Accept","application/json");
		uploadFile.addHeader("apiKey",apikey);
		uploadFile.addHeader("scope",scope);
		MultipartEntityBuilder builder = MultipartEntityBuilder.create();
		File f = new File(absolutefilepath);
		builder.addPart("file", new FileBody(f));
		HttpEntity multipart = builder.build();
		uploadFile.setEntity(multipart);
		CloseableHttpResponse response = httpClient.execute(uploadFile);
		int code=response.getStatusLine().getStatusCode();
		if(code!=200)
		{
			echo "StatusCode:"+code
		}
		else
		{
			echo "StatusCode:"+code
			HttpEntity entity = response.getEntity();
			if(entity!=null)
			{
				InputStream content = entity.getContent();
				def builder1 = new StringBuilder();
				Reader read = new InputStreamReader(content, StandardCharsets.UTF_8);
				BufferedReader reader = new BufferedReader(read);
				String line;
				try {
					while ((line = reader.readLine()) != null) {
						builder1.append(line);
					}

				}
				finally{
					reader.close();
					content.close();
				}
				//JSONParser parser=new JSONParser();
				//JSONObject responsejson=(JSONObject)parser.parse(builder1.toString());
				//JSONArray data=(JSONArray)responsejson.get("data");
				//JSONObject dataarray=(JSONObject)data.get(0);
				//fileid=(String)dataarray.get("id");
				JSONObject responsejson = new JSONObject(builder1.toString());
				JSONArray dataarray=responsejson.getJSONArray("data");
				JSONObject data=dataarray.getJSONObject(0);
				fileid=(String)data.getJSONObject("id");
				echo "FileId:"+fileid
				
				//Schedule a result import operation
				HttpPost schedule=new HttpPost(baseurl+"/rest/import/scheduler/results");
				schedule.addHeader("Accept","application/json");
				schedule.addHeader("Content-Type","application/json");
				schedule.addHeader("apiKey",apikey);
				schedule.addHeader("scope",scope);
				
				JSONObject jsonbody=new JSONObject();
				jsonbody.put("buildID",buildid);
				jsonbody.put("platformID",platformid);
				jsonbody.put("dropID",dropid);
				jsonbody.put("importFileId",fileid);
				jsonbody.put("entityType",entitytype);
				
				schedule.setEntity(jsonbody.toString());
				CloseableHttpResponse scheduleres=httpClient.execute(schedule);
				int fcode=scheduleres.getStatusLine().getStatusCode();
				echo fcode
			}
		}
		
		
	}
}